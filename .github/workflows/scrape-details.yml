name: Scrape Details (Stage 2)

on:
  # Disabled by default - use comprehensive-scraper.yml instead
  repository_dispatch:
    types: [process-details]
  # schedule:
  #   # Run every 2 hours to process queue
  #   - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of URLs to process'
        required: false
        default: '50'
        type: choice
        options:
          - '25'
          - '50'
          - '100'
          - '200'
      priority:
        description: 'Priority level to process'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - '1'
          - '2'
          - '3'

jobs:
  process-details:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Should complete in 30-40 minutes

    strategy:
      matrix:
        # Run 3 parallel jobs to process faster
        worker: [1, 2, 3]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Process detail pages
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          BRIGHT_DATA_CUSTOMER_ID: ${{ secrets.BRIGHT_DATA_CUSTOMER_ID }}
          BRIGHT_DATA_BROWSER_PASSWORD: ${{ secrets.BRIGHT_DATA_BROWSER_PASSWORD }}
        run: |
          # Each worker processes a batch
          BATCH_SIZE=${{ github.event.inputs.batch_size || '50' }}
          PRIORITY=${{ github.event.inputs.priority || github.event.client_payload.priority || '' }}

          echo "Worker ${{ matrix.worker }} processing batch of ${BATCH_SIZE} URLs"

          if [ -n "$PRIORITY" ]; then
            npx tsx scripts/scraping/scrape-details.ts --batch-size=${BATCH_SIZE} --priority=${PRIORITY}
          else
            npx tsx scripts/scraping/scrape-details.ts --batch-size=${BATCH_SIZE}
          fi

      - name: Report queue status
        if: always()
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          npx tsx -e "
          import { createClient } from '@supabase/supabase-js';

          async function reportStatus() {
            const supabase = createClient(
              process.env.NEXT_PUBLIC_SUPABASE_URL,
              process.env.SUPABASE_SERVICE_ROLE_KEY
            );

            const { data } = await supabase
              .from('scrape_queue_stats')
              .select('*');

            console.log('Queue Status:');
            data?.forEach(row => {
              console.log(\`  \${row.source} - \${row.status}: \${row.count}\`);
            });
          }

          reportStatus().catch(console.error);
          "