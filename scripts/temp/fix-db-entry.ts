import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

async function fixDatabaseEntry() {
  const sourceUrl = 'https://bringatrailer.com/listing/2004-porsche-911-gt3-64/';

  console.log('üîç Checking current database entry...');

  // First, check current state
  const { data: currentData, error: fetchError } = await supabase
    .from('listings')
    .select('*')
    .eq('source_url', sourceUrl)
    .single();

  if (fetchError) {
    console.error('‚ùå Error fetching listing:', fetchError);
    return;
  }

  if (!currentData) {
    console.log('‚ùå No listing found with that URL');
    return;
  }

  console.log('\nüìä Current database entry:');
  console.log('   ‚Ä¢ VIN:', currentData.vin);
  console.log('   ‚Ä¢ Mileage:', currentData.mileage);
  console.log('   ‚Ä¢ Price:', currentData.price);
  console.log('   ‚Ä¢ Year:', currentData.year);

  if (currentData.mileage === 186000) {
    console.log('\n‚ö†Ô∏è  Mileage is WRONG (186,000). Fixing it now...');

    // Update the mileage to the correct value
    const { error: updateError } = await supabase
      .from('listings')
      .update({ mileage: 8000 })
      .eq('source_url', sourceUrl);

    if (updateError) {
      console.error('‚ùå Error updating listing:', updateError);
      return;
    }

    console.log('‚úÖ Updated mileage from 186,000 to 8,000');

    // Verify the update
    const { data: updatedData, error: verifyError } = await supabase
      .from('listings')
      .select('mileage')
      .eq('source_url', sourceUrl)
      .single();

    if (verifyError) {
      console.error('‚ùå Error verifying update:', verifyError);
      return;
    }

    console.log('\n‚úÖ Verification - New mileage in database:', updatedData.mileage);
  } else if (currentData.mileage === 8000) {
    console.log('\n‚úÖ Mileage is already correct (8,000)');
  } else {
    console.log(`\n‚ö†Ô∏è  Unexpected mileage value: ${currentData.mileage}`);
  }
}

fixDatabaseEntry().catch(console.error);